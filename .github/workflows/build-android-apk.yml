name: Build Android APK for Redmi 9 Activ

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      retry_count:
        description: 'Number of build retries'
        required: false
        default: '3'

env:
  RETRY_ATTEMPTS: ${{ github.event.inputs.retry_count || '5' }}

jobs:
  build-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        attempt: [1, 2, 3, 4, 5]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Create Build Log Directory  
      run: |
        mkdir -p build-logs
        echo "Build attempt ${{ matrix.attempt }} started at $(date)" | tee build-logs/build-attempt-${{ matrix.attempt }}.log
        
    - name: Extract server.zip
      run: |
        echo "📦 Extracting server.zip..." | tee -a build-logs/build-attempt-${{ matrix.attempt }}.log
        if [ ! -f server.zip ]; then
          echo "❌ ERROR: server.zip not found!" | tee -a build-logs/build-attempt-${{ matrix.attempt }}.log
          exit 1
        fi
        
        unzip -o server.zip
        
        # Find the app directory
        if [ -d "fixed-chess-bot-app" ]; then
          echo "✅ Found app directory: fixed-chess-bot-app" | tee -a build-logs/build-attempt-${{ matrix.attempt }}.log
          cd fixed-chess-bot-app
        else
          echo "❌ ERROR: App directory not found after extraction" | tee -a build-logs/build-attempt-${{ matrix.attempt }}.log
          ls -la | tee -a build-logs/build-attempt-${{ matrix.attempt }}.log
          exit 1
        fi
        
    - name: Set up JDK 17 (Required for Android Gradle Plugin 8.1.0)
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 29
        build-tools: 30.0.3
        cmake: 3.18.1
        
    - name: Accept Android SDK Licenses
      run: |
        echo "🔐 Accepting Android SDK licenses..." | tee -a build-logs/build-attempt-${{ matrix.attempt }}.log
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
    - name: Install Android SDK Components for API 29
      run: |
        echo "📱 Installing Android SDK components..." | tee -a build-logs/build-attempt-${{ matrix.attempt }}.log
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platforms;android-29" \
          "build-tools;30.0.3" \
          "extras;android;m2repository" \
          "extras;google;m2repository" || true
          
    - name: Create local.properties
      working-directory: fixed-chess-bot-app
      run: |
        echo "🔧 Creating local.properties..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        cat local.properties | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        
    - name: Make gradlew executable
      working-directory: fixed-chess-bot-app
      run: |
        echo "⚙️ Making gradlew executable..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        chmod +x gradlew
        
    - name: Check Gradle Configuration
      working-directory: fixed-chess-bot-app
      run: |
        echo "📋 Checking Gradle configuration..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        echo "Project structure:" | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        ls -la | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        echo "
Gradle files:" | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        find . -name "*.gradle*" | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        
    - name: Clean Build (Attempt ${{ matrix.attempt }})
      id: clean-build
      working-directory: fixed-chess-bot-app
      continue-on-error: true
      run: |
        echo "🧹 Starting clean build attempt ${{ matrix.attempt }}..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        ./gradlew clean --stacktrace --info 2>&1 | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        
    - name: Build APK (Attempt ${{ matrix.attempt }})
      id: build-apk
      working-directory: fixed-chess-bot-app
      continue-on-error: true
      run: |
        echo "🔨 Building APK attempt ${{ matrix.attempt }}..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        ./gradlew assembleDebug --stacktrace --info --warning-mode all 2>&1 | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        
        # Check if APK was built successfully
        APK_PATH=$(find . -name "*.apk" | head -1)
        if [ ! -z "$APK_PATH" ]; then
          echo "✅ APK built successfully: $APK_PATH" | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
          ls -la $APK_PATH | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
          echo "APK_BUILT=true" >> $GITHUB_OUTPUT
          echo "APK_PATH=$APK_PATH" >> $GITHUB_OUTPUT
        else
          echo "❌ APK build failed on attempt ${{ matrix.attempt }}" | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
          echo "APK_BUILT=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Detect and Fix Build Errors (Attempt ${{ matrix.attempt }})
      if: steps.build-apk.outputs.APK_BUILT != 'true' && matrix.attempt < 5
      working-directory: fixed-chess-bot-app
      run: |
        echo "🔍 Analyzing build errors and applying fixes..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        
        # Common Android build error fixes
        if grep -q "Unable to resolve dependency" ../build-logs/build-attempt-${{ matrix.attempt }}.log; then
          echo "🔧 Fixing dependency resolution issues..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
          
          # Update repositories in build.gradle
          if [ -f "build.gradle" ]; then
            cat >> build.gradle << 'EOF'
            
allprojects {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://jitpack.io" }
        jcenter() // Warning: this repository is going to shut down soon
    }
}
EOF
          fi
        fi
        
        if grep -q "compileSdkVersion" ../build-logs/build-attempt-${{ matrix.attempt }}.log; then
          echo "🔧 Fixing SDK version issues..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
          # Fix will be applied in next attempt
        fi
        
        if grep -q "Execution failed for task" ../build-logs/build-attempt-${{ matrix.attempt }}.log; then
          echo "🔧 Clearing gradle cache for next attempt..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
          rm -rf ~/.gradle/caches/
          rm -rf .gradle/
        fi
        
        echo "⏭️ Fixes applied, will retry in next build attempt..." | tee -a ../build-logs/build-attempt-${{ matrix.attempt }}.log
        
    - name: Upload APK Artifact (Success)
      if: steps.build-apk.outputs.APK_BUILT == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: chess-bot-apk-redmi9-activ-attempt-${{ matrix.attempt }}
        path: |
          fixed-chess-bot-app/**/*.apk
          build-logs/build-attempt-${{ matrix.attempt }}.log
        retention-days: 30
        
    - name: Upload Build Logs (All Attempts)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-attempt-${{ matrix.attempt }}
        path: build-logs/
        retention-days: 7
        
    - name: Generate Build Summary
      if: always()
      run: |
        echo "## Build Summary - Attempt ${{ matrix.attempt }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.build-apk.outputs.APK_BUILT }}" == "true" ]; then
          echo "✅ **SUCCESS**: APK built successfully on attempt ${{ matrix.attempt }}!" >> $GITHUB_STEP_SUMMARY
          echo "📱 **Device**: Optimized for Redmi 9 Activ (Android 10, API 29)" >> $GITHUB_STEP_SUMMARY
          echo "📦 **APK Location**: ${{ steps.build-apk.outputs.APK_PATH }}" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Features**: Chess Bot with MIUI compatibility fixes" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **FAILED**: Build attempt ${{ matrix.attempt }} failed" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Next**: Will retry in subsequent attempts if available" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation Instructions for Redmi 9 Activ:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the APK from Artifacts below" >> $GITHUB_STEP_SUMMARY  
        echo "2. Enable Developer Options: Settings > About Phone > Tap MIUI Version 7 times" >> $GITHUB_STEP_SUMMARY
        echo "3. Enable Unknown Sources: Settings > Security > Unknown Sources" >> $GITHUB_STEP_SUMMARY
        echo "4. Install APK and grant required permissions:" >> $GITHUB_STEP_SUMMARY
        echo "   - Overlay Permission: Settings > Apps > Chess Bot > Display pop-up windows" >> $GITHUB_STEP_SUMMARY
        echo "   - Accessibility: Settings > Accessibility > Chess Bot > Enable" >> $GITHUB_STEP_SUMMARY
        echo "   - Battery Optimization: Settings > Apps > Chess Bot > No restrictions" >> $GITHUB_STEP_SUMMARY
        
  # Final summary job that runs after all build attempts
  build-summary:
    runs-on: ubuntu-latest
    needs: build-apk
    if: always()
    
    steps:
    - name: Generate Final Build Report
      run: |
        echo "# 🏗️ Android APK Build Report - Redmi 9 Activ" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Target Device**: Redmi 9 Activ (Android 10, API 29, MIUI)" >> $GITHUB_STEP_SUMMARY
        echo "**App**: Chess Bot with MIUI Compatibility Fixes" >> $GITHUB_STEP_SUMMARY
        echo "**Build Strategy**: Multi-attempt with automatic error fixes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Build Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "Check individual job logs above for detailed build information." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📥 Download Instructions" >> $GITHUB_STEP_SUMMARY
        echo "1. Look for successful build artifacts below" >> $GITHUB_STEP_SUMMARY
        echo "2. Download the `chess-bot-apk-redmi9-activ-attempt-X` artifact" >> $GITHUB_STEP_SUMMARY
        echo "3. Follow installation instructions provided in the build logs" >> $GITHUB_STEP_SUMMARY
