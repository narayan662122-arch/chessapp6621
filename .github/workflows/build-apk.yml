name: Build Android APK from server.zip

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Extract server.zip
      run: |
        echo "Extracting server.zip..."
        unzip server.zip -d extracted_app/
        ls -la extracted_app/
        
    - name: Find Android project root
      run: |
        echo "Searching for Android project structure..."
        find extracted_app/ -name "build.gradle*" -o -name "gradlew*" -o -name "app" -type d | head -10
        
        # Find the main project directory
        if [ -f "extracted_app/gradlew" ]; then
          PROJECT_ROOT="extracted_app"
        elif [ -f "extracted_app/*/gradlew" ]; then
          PROJECT_ROOT=$(find extracted_app/ -name "gradlew" -printf '%h\n' | head -1)
        else
          # Look for build.gradle files
          PROJECT_ROOT=$(find extracted_app/ -name "build.gradle*" -printf '%h\n' | head -1)
        fi
        
        echo "PROJECT_ROOT=$PROJECT_ROOT" >> $GITHUB_ENV
        echo "Project root found at: $PROJECT_ROOT"
        ls -la $PROJECT_ROOT/
        
    - name: Make gradlew executable
      run: |
        if [ -f "$PROJECT_ROOT/gradlew" ]; then
          chmod +x $PROJECT_ROOT/gradlew
          echo "Made gradlew executable"
        else
          echo "No gradlew found, will use gradle command"
        fi
        
    - name: Configure build for Redmi 9 Activ
      run: |
        cd $PROJECT_ROOT
        echo "Configuring build for Redmi 9 Activ (Android 10, API 29, arm64-v8a)"
        
        # Check if app/build.gradle exists and configure it
        if [ -f "app/build.gradle" ]; then
          echo "Found app/build.gradle, configuring build settings"
          
          # Backup original
          cp app/build.gradle app/build.gradle.backup
          
          # Configure for Android 10, API 29
          sed -i 's/compileSdkVersion.*/compileSdkVersion 29/' app/build.gradle || echo "compileSdkVersion not found"
          sed -i 's/targetSdkVersion.*/targetSdkVersion 29/' app/build.gradle || echo "targetSdkVersion not found"
          sed -i 's/minSdkVersion.*/minSdkVersion 21/' app/build.gradle || echo "minSdkVersion not found"
          
          # Add arm64-v8a configuration if not present
          if ! grep -q "arm64-v8a" app/build.gradle; then
            echo "Adding arm64-v8a ABI filter"
            sed -i '/android {/a \    defaultConfig {\n        ndk {\n            abiFilters "arm64-v8a"\n        }\n    }' app/build.gradle
          fi
          
          echo "Build configuration updated:"
          grep -A 10 -B 2 "compileSdkVersion\|targetSdkVersion\|minSdkVersion\|abiFilters" app/build.gradle || true
        fi
        
    - name: Build Release APK
      run: |
        cd $PROJECT_ROOT
        
        echo "Starting APK build process..."
        
        # Try gradlew first, fallback to gradle
        if [ -f "gradlew" ]; then
          echo "Using gradlew to build..."
          ./gradlew clean
          ./gradlew assembleRelease -Pandroid.injected.signing.store.file="" -Pandroid.injected.signing.store.password="" -Pandroid.injected.signing.key.alias="" -Pandroid.injected.signing.key.password="" --stacktrace
        else
          echo "Using gradle to build..."
          gradle clean
          gradle assembleRelease --stacktrace
        fi
        
        echo "Build completed. Searching for APK files..."
        find . -name "*.apk" -type f
        
    - name: Find and prepare APK for upload
      run: |
        cd $PROJECT_ROOT
        
        # Find all APK files
        APK_FILES=$(find . -name "*.apk" -type f | head -5)
        
        if [ -z "$APK_FILES" ]; then
          echo "ERROR: No APK files found after build!"
          echo "Checking build outputs..."
          find . -name "outputs" -type d | xargs -I {} find {} -type f
          exit 1
        fi
        
        echo "Found APK files:"
        echo "$APK_FILES"
        
        # Create upload directory
        mkdir -p apk_output
        
        # Copy APK files to upload directory
        for apk in $APK_FILES; do
          APK_NAME=$(basename "$apk")
          NEW_NAME="ChessApp6621-Redmi9Activ-${APK_NAME}"
          cp "$apk" "apk_output/${NEW_NAME}"
          echo "Prepared: $apk -> apk_output/${NEW_NAME}"
        done
        
        ls -la apk_output/
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ChessApp6621-APK-Redmi9Activ
        path: ${{ env.PROJECT_ROOT }}/apk_output/*.apk
        retention-days: 30
        
    - name: Build Summary
      run: |
        echo "✅ APK Build Completed Successfully!"
        echo "📱 Target Device: Redmi 9 Activ (Android 10, API 29, arm64-v8a)"
        echo "📦 Artifacts uploaded as: ChessApp6621-APK-Redmi9Activ"
        echo "⬇️  Download your APK from the Actions artifacts section"
        
        cd $PROJECT_ROOT
        find apk_output/ -name "*.apk" -exec ls -lh {} \; | while read -r line; do
          echo "📱 $line"
        done
