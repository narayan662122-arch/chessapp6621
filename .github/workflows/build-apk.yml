name: Build Android APK from server.zip (Enhanced)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Android SDK components
      run: |
        echo "Installing required Android SDK components..."
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-29" "build-tools;29.0.3" "platform-tools"
        
    - name: Extract and analyze server.zip
      run: |
        echo "=== EXTRACTING SERVER.ZIP ==="
        unzip -v server.zip
        echo ""
        echo "Extracting server.zip..."
        unzip server.zip -d extracted_app/
        
        echo ""
        echo "=== ANALYZING EXTRACTED CONTENTS ==="
        find extracted_app/ -type f -name "*.apk" | head -5 || echo "No APK files found"
        find extracted_app/ -type f -name "*.aab" | head -5 || echo "No AAB files found"
        find extracted_app/ -name "build.gradle*" | head -10 || echo "No build.gradle files found"
        find extracted_app/ -name "gradlew*" | head -5 || echo "No gradlew files found"
        find extracted_app/ -name "AndroidManifest.xml" | head -5 || echo "No AndroidManifest.xml found"
        find extracted_app/ -name "src" -type d | head -5 || echo "No src directories found"
        
        echo ""
        echo "=== DIRECTORY STRUCTURE ==="
        ls -la extracted_app/
        
        if [ -d "extracted_app/" ]; then
          find extracted_app/ -maxdepth 3 -type d | head -15
        fi
        
    - name: Check for pre-built APK files
      run: |
        echo "=== CHECKING FOR PRE-BUILT APKs ==="
        APK_FILES=$(find extracted_app/ -name "*.apk" -type f | head -10)
        
        if [ -n "$APK_FILES" ]; then
          echo "✅ Found pre-built APK files:"
          echo "$APK_FILES"
          
          # Create upload directory and copy APKs
          mkdir -p apk_output
          for apk in $APK_FILES; do
            APK_NAME=$(basename "$apk")
            NEW_NAME="ChessApp6621-PreBuilt-Redmi9Activ-${APK_NAME}"
            cp "$apk" "apk_output/${NEW_NAME}"
            echo "✅ Prepared: $apk -> apk_output/${NEW_NAME}"
          done
          
          echo "APK_FOUND=true" >> $GITHUB_ENV
          ls -la apk_output/
        else
          echo "ℹ️  No pre-built APK files found. Will attempt to build from source."
          echo "APK_FOUND=false" >> $GITHUB_ENV
        fi
        
    - name: Find Android project root
      if: env.APK_FOUND == 'false'
      run: |
        echo "=== FINDING ANDROID PROJECT ROOT ==="
        
        # Look for gradlew files first
        if [ -f "extracted_app/gradlew" ]; then
          PROJECT_ROOT="extracted_app"
        elif find extracted_app/ -name "gradlew" -type f | head -1; then
          PROJECT_ROOT=$(find extracted_app/ -name "gradlew" -type f -printf '%h\n' | head -1)
        elif find extracted_app/ -name "build.gradle" -type f | head -1; then
          # Look for build.gradle files
          PROJECT_ROOT=$(find extracted_app/ -name "build.gradle" -type f -printf '%h\n' | head -1)
        else
          echo "❌ No Android project structure found!"
          echo "Contents of extracted_app/:"
          find extracted_app/ -type f | head -20
          exit 1
        fi
        
        echo "PROJECT_ROOT=$PROJECT_ROOT" >> $GITHUB_ENV
        echo "✅ Project root found at: $PROJECT_ROOT"
        
        echo "=== PROJECT STRUCTURE ==="
        ls -la $PROJECT_ROOT/
        
        if [ -f "$PROJECT_ROOT/settings.gradle" ]; then
          echo "settings.gradle content:"
          cat $PROJECT_ROOT/settings.gradle
        fi
        
    - name: Make gradlew executable and configure build
      if: env.APK_FOUND == 'false'
      run: |
        cd $PROJECT_ROOT
        
        if [ -f "gradlew" ]; then
          chmod +x gradlew
          echo "✅ Made gradlew executable"
        fi
        
        echo "=== GRADLE WRAPPER VERSION ==="
        if [ -f "gradle/wrapper/gradle-wrapper.properties" ]; then
          cat gradle/wrapper/gradle-wrapper.properties
        fi
        
        echo "=== CONFIGURING BUILD FOR REDMI 9 ACTIV ==="
        if [ -f "app/build.gradle" ]; then
          echo "Found app/build.gradle"
          cp app/build.gradle app/build.gradle.backup
          
          # Show current configuration
          echo "Current configuration:"
          grep -E "compileSdk|targetSdk|minSdk|compileSdkVersion|targetSdkVersion|minSdkVersion" app/build.gradle || echo "SDK versions not found in expected format"
          
        elif [ -f "build.gradle" ]; then
          echo "Found root build.gradle"
          cp build.gradle build.gradle.backup
        fi
        
    - name: Build APK
      if: env.APK_FOUND == 'false'
      run: |
        cd $PROJECT_ROOT
        
        echo "=== STARTING APK BUILD ==="
        echo "Java version:"
        java -version
        
        echo "Android SDK location: $ANDROID_HOME"
        
        # Build the project
        if [ -f "gradlew" ]; then
          echo "Using gradlew to build..."
          ./gradlew --version
          ./gradlew clean --stacktrace || echo "Clean failed, continuing..."
          
          # Try different build variants
          echo "Attempting assembleRelease..."
          ./gradlew assembleRelease --stacktrace --info || {
            echo "assembleRelease failed, trying assembleDebug..."
            ./gradlew assembleDebug --stacktrace --info || {
              echo "assembleDebug failed, trying build..."
              ./gradlew build --stacktrace --info
            }
          }
        else
          echo "Using gradle to build..."
          gradle clean
          gradle assembleRelease --stacktrace || gradle assembleDebug --stacktrace || gradle build --stacktrace
        fi
        
        echo "=== BUILD COMPLETE - SEARCHING FOR APK FILES ==="
        find . -name "*.apk" -type f | head -10
        
    - name: Prepare APK files for upload
      run: |
        echo "=== PREPARING APK FILES ==="
        
        if [ "$APK_FOUND" = "true" ]; then
          echo "Using pre-built APK files"
        else
          cd $PROJECT_ROOT
          
          # Find all APK files
          APK_FILES=$(find . -name "*.apk" -type f | head -10)
          
          if [ -z "$APK_FILES" ]; then
            echo "❌ No APK files found after build!"
            echo "=== DEBUGGING - BUILD OUTPUTS ==="
            find . -name "outputs" -type d | head -5
            find . -name "build" -type d | head -5
            find . -path "*/build/outputs/*" -type f | head -10
            exit 1
          fi
          
          echo "✅ Found APK files:"
          echo "$APK_FILES"
          
          # Create upload directory if not exists
          mkdir -p apk_output
          
          # Copy APK files to upload directory
          for apk in $APK_FILES; do
            APK_NAME=$(basename "$apk")
            NEW_NAME="ChessApp6621-Built-Redmi9Activ-${APK_NAME}"
            cp "$apk" "apk_output/${NEW_NAME}"
            echo "✅ Prepared: $apk -> apk_output/${NEW_NAME}"
          done
        fi
        
        echo "=== FINAL APK FILES ==="
        ls -la apk_output/
        
        for apk in apk_output/*.apk; do
          if [ -f "$apk" ]; then
            echo "📱 APK: $(basename $apk) ($(du -h $apk | cut -f1))"
          fi
        done
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ChessApp6621-APK-Redmi9Activ-Enhanced
        path: apk_output/*.apk
        retention-days: 30
        
    - name: Build Summary
      run: |
        echo "🎉 APK BUILD PROCESS COMPLETED!"
        echo "📱 Target Device: Redmi 9 Activ (Android 10, API 29, arm64-v8a)"
        echo "📦 Artifacts: ChessApp6621-APK-Redmi9Activ-Enhanced"
        echo "⬇️  Download your APK from GitHub Actions artifacts"
        echo ""
        echo "APK Files Created:"
        find apk_output/ -name "*.apk" -exec ls -lh {} \; 2>/dev/null | while read -r line; do
          echo "📱 $line"
        done || echo "Check artifacts for APK files"
