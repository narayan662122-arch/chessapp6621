name: Chess Bot APK Builder (Specialized for Kotlin)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-chess-bot-apk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository  
      uses: actions/checkout@v4
      
    - name: Set up JDK 17 for Kotlin
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Android SDK components for API 29 (Redmi 9 Activ)
      run: |
        echo "Installing Android SDK components for Redmi 9 Activ..."
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-29" "build-tools;29.0.3" "platform-tools" "ndk;21.4.7075529"
        
    - name: Extract Chess Bot App
      run: |
        echo "🚀 EXTRACTING CHESS BOT APP"
        unzip -q server.zip
        echo "✅ Extraction complete"
        
        echo "📁 Chess Bot Project Structure:"
        ls -la fixed-chess-bot-app/
        
        echo "📱 App Directory:"
        ls -la fixed-chess-bot-app/app/
        
    - name: Configure Kotlin Build for Redmi 9 Activ
      run: |
        cd fixed-chess-bot-app
        
        echo "🔧 CONFIGURING FOR REDMI 9 ACTIV"
        echo "Target: Android 10 (API 29), arm64-v8a"
        
        # Make gradlew executable
        chmod +x gradlew
        
        echo "📝 Current build configuration:"
        cat app/build.gradle.kts
        
        echo ""
        echo "🎯 Optimizing for Redmi 9 Activ..."
        
        # Backup original build file
        cp app/build.gradle.kts app/build.gradle.kts.backup
        
        # Configure build for Redmi 9 Activ
        cat > app/build.gradle.kts << 'BUILD_EOF'
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.chessbot"
    compileSdk = 29
    
    defaultConfig {
        applicationId = "com.chessbot.redmi9activ"
        minSdk = 21
        targetSdk = 29
        versionCode = 1
        versionName = "1.0-Redmi9Activ"
        
        ndk {
            abiFilters += listOf("arm64-v8a")
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = "1.8"
    }
    
    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {
    implementation(files("libs/json-20231013.jar"))
    implementation(files("libs/kotlinx-coroutines-core-1.7.3.jar"))  
    implementation(files("libs/okhttp-4.12.0.jar"))
    implementation("androidx.core:core-ktx:1.6.0")
    implementation("androidx.appcompat:appcompat:1.3.1")
    implementation("com.google.android.material:material:1.4.0")
}
BUILD_EOF

        echo "✅ Build configuration updated for Redmi 9 Activ"
        echo "📝 New configuration:"
        cat app/build.gradle.kts
        
    - name: Build Chess Bot APK
      run: |
        cd fixed-chess-bot-app
        
        echo "🏗️  BUILDING CHESS BOT APK"
        echo "Target: Redmi 9 Activ (Android 10, API 29, arm64-v8a)"
        
        # Clean and build
        echo "🧹 Cleaning project..."
        ./gradlew clean --stacktrace
        
        echo "🔨 Building Release APK..."
        ./gradlew assembleRelease --stacktrace --info
        
        echo "🔍 Searching for APK files..."
        find . -name "*.apk" -type f
        
    - name: Prepare Chess Bot APK for Download
      run: |
        cd fixed-chess-bot-app
        
        echo "📦 PREPARING APK FOR DOWNLOAD"
        
        # Find APK files
        APK_FILES=$(find . -name "*.apk" -type f)
        
        if [ -z "$APK_FILES" ]; then
          echo "❌ No APK files found!"
          echo "🔍 Checking build outputs..."
          find . -path "*/build/outputs/*" -type f | head -10
          exit 1
        fi
        
        echo "✅ Found APK files:"
        echo "$APK_FILES"
        
        # Create output directory
        mkdir -p ../chess_bot_apk
        
        # Copy and rename APK for Redmi 9 Activ
        for apk in $APK_FILES; do
          APK_SIZE=$(du -h "$apk" | cut -f1)
          APK_NAME=$(basename "$apk")
          NEW_NAME="ChessBotApp-Redmi9Activ-${APK_NAME}"
          
          cp "$apk" "../chess_bot_apk/${NEW_NAME}"
          
          echo "📱 Created: ${NEW_NAME} (${APK_SIZE})"
        done
        
        echo ""
        echo "📱 FINAL APK FILES FOR REDMI 9 ACTIV:"
        ls -lah ../chess_bot_apk/
        
    - name: Upload Chess Bot APK
      uses: actions/upload-artifact@v4
      with:
        name: ChessBotApp-Redmi9Activ-APK
        path: chess_bot_apk/*.apk
        retention-days: 30
        
    - name: Success Summary
      run: |
        echo "🎉 CHESS BOT APK BUILD SUCCESSFUL!"
        echo ""
        echo "📱 App: Chess Bot for Redmi 9 Activ"
        echo "🎯 Target: Android 10 (API 29), arm64-v8a architecture" 
        echo "📦 Artifact: ChessBotApp-Redmi9Activ-APK"
        echo "⬇️  Download: GitHub Actions → Artifacts"
        echo ""
        echo "✅ Your chess bot APK is ready for installation on Redmi 9 Activ!"
        
        if [ -d "chess_bot_apk" ]; then
          echo ""
          echo "📁 Created APK files:"
          for apk in chess_bot_apk/*.apk; do
            if [ -f "$apk" ]; then
              SIZE=$(du -h "$apk" | cut -f1)
              echo "  📱 $(basename $apk) ($SIZE)"
            fi
          done
        fi
