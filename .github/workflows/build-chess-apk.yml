name: Build Chess Bot APK for Redmi 9 Activ

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📦 Extract server.zip
      run: |
        echo "🔍 Checking for server.zip..."
        if [ ! -f "server.zip" ]; then
          echo "❌ ERROR: server.zip not found!"
          ls -la
          exit 1
        fi
        
        echo "📦 Extracting server.zip..."
        unzip -o server.zip
        ls -la
        
        echo "🔍 Looking for app directory..."
        if [ -d "fixed-chess-bot-app" ]; then
          echo "✅ Found app directory: fixed-chess-bot-app"
          cd fixed-chess-bot-app
          echo "📁 App directory contents:"
          ls -la
        else
          echo "❌ ERROR: App directory not found"
          echo "Available directories:"
          find . -type d -name "*chess*" -o -name "*app*" || true
          exit 1
        fi
        
    - name: ☕ Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 29
        build-tools: 30.0.3
        
    - name: 🔐 Accept Android SDK Licenses
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
    - name: 📋 Setup Build Environment
      working-directory: fixed-chess-bot-app
      run: |
        echo "🔧 Creating local.properties..."
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        
        echo "⚙️ Making gradlew executable..."
        chmod +x gradlew
        
        echo "📋 Gradle version:"
        ./gradlew --version || true
        
        echo "🔍 Project structure:"
        find . -name "*.gradle*" | head -10
        
    - name: 🧹 Clean Project (Attempt 1)
      id: clean_attempt_1
      working-directory: fixed-chess-bot-app
      continue-on-error: true
      run: |
        echo "🧹 Cleaning project..."
        ./gradlew clean --stacktrace --info || true
        
    - name: 🔨 Build APK (Attempt 1)
      id: build_attempt_1
      working-directory: fixed-chess-bot-app
      continue-on-error: true
      run: |
        echo "🔨 Building APK (Attempt 1)..."
        ./gradlew assembleDebug --stacktrace --info --warning-mode all
        
        echo "🔍 Looking for APK files..."
        APK_FILES=$(find . -name "*.apk" | head -5)
        if [ ! -z "$APK_FILES" ]; then
          echo "✅ APK files found:"
          echo "$APK_FILES"
          echo "APK_BUILT=true" >> $GITHUB_OUTPUT
        else
          echo "❌ No APK files found"
          echo "APK_BUILT=false" >> $GITHUB_OUTPUT
        fi
        
    - name: 🔧 Fix Issues & Retry (Attempt 2)
      id: build_attempt_2
      if: steps.build_attempt_1.outputs.APK_BUILT != 'true'
      working-directory: fixed-chess-bot-app
      continue-on-error: true
      run: |
        echo "🔧 Attempt 2: Applying fixes..."
        
        # Clear gradle caches
        rm -rf ~/.gradle/caches/ || true
        rm -rf .gradle/ || true
        
        # Update repositories in build.gradle if needed
        if [ -f "build.gradle" ] && ! grep -q "mavenCentral()" build.gradle; then
          echo "🔧 Adding repositories to build.gradle..."
          cat >> build.gradle << 'EOF'
          
allprojects {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
EOF
        fi
        
        echo "🔨 Building APK (Attempt 2)..."
        ./gradlew clean assembleDebug --stacktrace --info || true
        
        APK_FILES=$(find . -name "*.apk" | head -5)
        if [ ! -z "$APK_FILES" ]; then
          echo "✅ APK files found on attempt 2:"
          echo "$APK_FILES"
          echo "APK_BUILT=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Attempt 2 failed"
          echo "APK_BUILT=false" >> $GITHUB_OUTPUT
        fi
        
    - name: 🚨 Final Retry (Attempt 3)
      id: build_attempt_3
      if: steps.build_attempt_1.outputs.APK_BUILT != 'true' && steps.build_attempt_2.outputs.APK_BUILT != 'true'
      working-directory: fixed-chess-bot-app
      continue-on-error: true
      run: |
        echo "🚨 Final attempt (3): Aggressive fixes..."
        
        # Completely clean environment
        rm -rf ~/.gradle/ || true
        rm -rf build/ || true
        rm -rf app/build/ || true
        
        # Force dependency refresh
        echo "🔄 Forcing dependency refresh..."
        ./gradlew clean --refresh-dependencies --stacktrace || true
        
        echo "🔨 Final build attempt..."
        ./gradlew assembleDebug --stacktrace --info --refresh-dependencies || true
        
        APK_FILES=$(find . -name "*.apk" | head -5)
        if [ ! -z "$APK_FILES" ]; then
          echo "✅ SUCCESS on final attempt!"
          echo "$APK_FILES"
          echo "APK_BUILT=true" >> $GITHUB_OUTPUT
        else
          echo "❌ All attempts failed"
          echo "Build logs and errors:"
          find . -name "*.log" -exec echo "=== {} ===" ; -exec cat {} ; 2>/dev/null || true
          echo "APK_BUILT=false" >> $GITHUB_OUTPUT
        fi
        
    - name: 📁 Collect Build Outputs
      if: always()
      working-directory: fixed-chess-bot-app
      run: |
        echo "📁 Collecting all build outputs..."
        
        echo "APK files:"
        find . -name "*.apk" -ls || true
        
        echo "
Build directories:"
        find . -name "build" -type d || true
        
        echo "
Log files:"
        find . -name "*.log" || true
        
    - name: 📤 Upload APK (Success)
      if: steps.build_attempt_1.outputs.APK_BUILT == 'true' || steps.build_attempt_2.outputs.APK_BUILT == 'true' || steps.build_attempt_3.outputs.APK_BUILT == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: chess-bot-apk-redmi9-activ
        path: |
          fixed-chess-bot-app/**/*.apk
          fixed-chess-bot-app/app/build/outputs/apk/**/*
        retention-days: 30
        
    - name: 📤 Upload Debug Logs (Always)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-debug-logs
        path: |
          fixed-chess-bot-app/build/
          fixed-chess-bot-app/app/build/
          fixed-chess-bot-app/**/*.log
        retention-days: 7
        
    - name: 📋 Build Summary
      if: always()
      run: |
        echo "# 🏗️ Chess Bot APK Build Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Target Device**: Redmi 9 Activ (Android 10, API 29)" >> $GITHUB_STEP_SUMMARY
        echo "**Build Strategy**: 3 attempts with progressive fixes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check which attempt succeeded
        ATTEMPT_1="${{ steps.build_attempt_1.outputs.APK_BUILT }}"
        ATTEMPT_2="${{ steps.build_attempt_2.outputs.APK_BUILT }}"
        ATTEMPT_3="${{ steps.build_attempt_3.outputs.APK_BUILT }}"
        
        if [ "$ATTEMPT_1" = "true" ]; then
          echo "✅ **SUCCESS**: APK built on first attempt!" >> $GITHUB_STEP_SUMMARY
        elif [ "$ATTEMPT_2" = "true" ]; then
          echo "✅ **SUCCESS**: APK built on second attempt (after fixes)!" >> $GITHUB_STEP_SUMMARY
        elif [ "$ATTEMPT_3" = "true" ]; then
          echo "✅ **SUCCESS**: APK built on final attempt!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **FAILED**: All build attempts failed" >> $GITHUB_STEP_SUMMARY
          echo "📋 Check debug logs artifact for detailed error information" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📱 Installation for Redmi 9 Activ" >> $GITHUB_STEP_SUMMARY
        echo "1. Download APK from artifacts above" >> $GITHUB_STEP_SUMMARY
        echo "2. Enable Developer Options: Settings > About > Tap MIUI Version 7x" >> $GITHUB_STEP_SUMMARY
        echo "3. Allow Unknown Sources: Security > Install Unknown Apps" >> $GITHUB_STEP_SUMMARY
        echo "4. Install APK and grant permissions:" >> $GITHUB_STEP_SUMMARY
        echo "   - Overlay Permission (Display over other apps)" >> $GITHUB_STEP_SUMMARY
        echo "   - Accessibility Service (for chess automation)" >> $GITHUB_STEP_SUMMARY
        echo "   - Battery optimization disabled" >> $GITHUB_STEP_SUMMARY
